package retry

import (
	"time"
)

const (
	// DefaultInterval is used when Config.Interval is nonpositive
	DefaultInterval time.Duration = 5 * time.Second
)

// Config is the set of configuration options for an HTTP client retry decorator
type Config struct {
	// Retries is the number of attempts to retry an HTTP transaction.  This value
	// does not include the initial attempt.  The maximum number of HTTP transactions
	// will be 1+Retries, accounting for the initial attempt.
	//
	// If this value is unset or nonpositive, no retries will be performed.  Leaving this
	// value unset will disable retries even if any other fields of this type are set.
	Retries int `json:"retries" yaml:"retries"`

	// MaxElapsedTime is the optional duration that all HTTP transactions together cannot
	// exceed.  This value includes the initial attempt with all retries.  If this duration
	// is exceeded, retry attempts will be short circuited.
	//
	// There is no default for this field.  Leaving this field unset means that retries up to
	// the Retries value  will continue unless the request's context expires.
	MaxElapsedTime time.Duration `json:"maxElapsedTime" yaml:"maxElapsedTime"`

	// Interval is the base duration between each retry attempt.  If nonpositive, DefaultInterval
	// is used.
	//
	// In the simple case, when Multiplier and Jitter are unset, this is the interval
	// between each retry.
	//
	// If Multiplier is set to a positive value, typically greater than 1.0, then each
	// successive retry waits an amount equal to Interval*(Multiplier^n), where n is
	// the current retry.  Although a Multiplier of less than 1.0 is allowed, it's discouraged
	// since that means each retry waits less time than the previous retry.
	//
	// If a Jitter is set, then each retry's interval is multiplied by a random number
	// in the range [1-Jitter,1+Jitter].  This is over and above any Multiplier value.
	Interval time.Duration `json:"interval" yaml:"interval"`

	// Multiplier is the factor applied to each retry interval.  If nonpositive, no multiplier
	// is used.  There is no default for this field.
	//
	// Each retry's interval is computed by (Previous*Multiplier), not including Jitter.
	// A Multiplier value of less than 1.0 will result in decreasing wait times for each retry.
	Multiplier float64 `json:"multiplier" yaml:"multiplier"`

	// Jitter is the factor used to determine random intervals.  The actual interval
	// between retries is generated by multiplying by a random number in the range
	// [1-Jitter, 1+Jitter].  That is, the Jitter is a percentage above and below the
	// base interval.
	//
	// Note that the internal algorithm avoids floating point math in favor of fixed point.
	// Only (3) decimal places to the right of the Jitter value are supported, e.g. 0.25
	// is honored, but 0.623541 would be truncated to 0.624.
	//
	// If this field is not in the open range (0.0, 1.0), no jitter is used.
	Jitter float64 `json:"jitter" yaml:"jitter"`

	// Random is the optional source of randomness used in computing jitter.
	// If this value is omitted, math/rand.New is used to compute a source
	// of randomness with the current time as the seed.
	Random Random `json:"-" yaml:"-"`

	// Timer is the timer strategy used to creating channels for awaiting
	// until the next retry interval.  If unset, DefaultTimer is used.
	Timer Timer `json:"-" yaml:"-"`

	// Check is the predicate used to determine if the result of http.Client.Do
	// can be retried.  Even if this predicate returns true, the number of Retries
	// will not be exceeded.
	Check Check `json:"-" yaml:"-"`
}
